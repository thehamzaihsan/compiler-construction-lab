/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Lang.jj */
/*@egen*/
options {
    STATIC = false;
                                // \u2190 Critical: Forces JJTree to generate separate classes
    NODE_CLASS_PREFIX = "AST";  // Optional: Adds "AST" prefix to node classes
}

PARSER_BEGIN(Lang)

public class Lang/*@bgen(jjtree)*/implements LangTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTLangState jjtree = new JJTLangState();

/*@egen*/
  public static void main(String[] args) {
    try {
      Lang parser = new Lang(System.in);
      SimpleNode root = parser.Start();
      System.out.println("Parsing completed successfully.");
      root.dump("");
     
    } catch (Exception e) {
      System.out.println("Error parsing input:");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(Lang)

SKIP : {
  " "
| "\t" 
| "\n"
| "\r"
}


TOKEN : {
    < ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < STAR: "*" >
|   < SLASH: "/" >
|   < LPAREN: "(" >
|   < RPAREN: ")" >
|   <SEMICOLON: ";">
}

SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Start */
  try {
/*@egen*/
  E()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


// AdditiveExpression
void E()                     : {/*@bgen(jjtree) AdditiveExpression */
      SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
      boolean jjtc000 = true;
      jjtree.openNodeScope(jjtn000);
/*@egen*/
      Token token;
}
{/*@bgen(jjtree) AdditiveExpression */
    try {
/*@egen*/
    T() (  (token="+"|token="-") T() {jjtn000.jjtSetValue(token.image);} )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// MultiplicativeExpression
void T()                           : {/*@bgen(jjtree) MultiplicativeExpression */
      SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
      boolean jjtc000 = true;
      jjtree.openNodeScope(jjtn000);
/*@egen*/
      Token t;
}
{/*@bgen(jjtree) MultiplicativeExpression */
    try {
/*@egen*/
    F() ( (t=<STAR>|t=<SLASH>) F() {jjtn000.jjtSetValue(t.image);} )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
   
}

// Primary expression
void F()             : {/*@bgen(jjtree) Identifier */
      SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
      boolean jjtc000 = true;
      jjtree.openNodeScope(jjtn000);
/*@egen*/
      Token t;
}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t=<ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}
|   "(" E() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}