/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MiniLang.jj */
/*@egen*/options
{
  static = true;
}

PARSER_BEGIN(MiniLang)

public class MiniLang/*@bgen(jjtree)*/implements MiniLangTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTMiniLangState jjtree = new JJTMiniLangState();

/*@egen*/
  public static void main(String args[])
  {
    System.out.print("\033[H\033[2J");
    System.out.flush();
    System.out.print("Enter expression: ");
    
    MiniLang parser = new MiniLang(System.in);
    try {
        SimpleNode n = parser.Start();
        n.dump("");
        System.out.println("Type checking complete.");
    }
    catch (Exception e) {
        System.out.println("Error: " + e.getMessage());
    }
  }

  // TYPE CHECKING METHOD FOR Q2
  public void verifyTypes(SimpleNode node1, SimpleNode node2) {
    if (!node1.getType().equals(node2.getType())) {
        throw new RuntimeException("TYPE MISMATCH: " + 
            node1.getType() + " vs " + node2.getType());
    }
  }
}

PARSER_END(MiniLang)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : {
  < INT : "int" >
| < FLOAT : "float" >
| < ID : ["a"-"z"] (["a"-"z","0"-"9"])* >
| < NUMBER : ["0"-"9"] (["0"-"9"])* >
| < FLOAT_NUM : ["0"-"9"](["0"-"9"])* "." ["0"-"9"](["0"-"9"])* >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  ( Assignment() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Assignment() : {/*@bgen(jjtree) Assignment */
                      SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ SimpleNode lhs, rhs; }
{/*@bgen(jjtree) Assignment */
  try {
/*@egen*/
  lhs=Variable() "=" rhs=Expression() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    verifyTypes(lhs, rhs);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode Variable() : {/*@bgen(jjtree) Variable */
                          SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Variable */
  try {
/*@egen*/
  t=<ID>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    ((SimpleNode)jjtn000).setType("int"); // Default type
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode Expression() : {/*@bgen(jjtree) Expression */
                            SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ SimpleNode n; }
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  n=Term() ( "+" n=Term() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    return n;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode Term() : {/*@bgen(jjtree) Term */
                      SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  t=<NUMBER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    ((SimpleNode)jjtn000).setType("int");
    return jjtn000;
  }
| t=<FLOAT_NUM>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    ((SimpleNode)jjtn000).setType("float");
    return jjtn000;
  }
| t=<ID>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    ((SimpleNode)jjtn000).setType("int");
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}