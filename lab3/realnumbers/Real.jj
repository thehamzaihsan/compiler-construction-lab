options {
    STATIC = false; // Generate a non-static parser
}

PARSER_BEGIN(Real)
import java.io.*;
import java.util.Scanner;

public class Real {
    public static void main(String[] args) {
        try {
            Real parser = new Real(new ByteArrayInputStream(new Scanner(System.in).nextLine().getBytes()));
            parser.Start();
            System.out.println("\nInput is valid");
        } catch (TokenMgrError e) {
            System.out.println("Error: Input contains invalid characters.");
        } catch (ParseException e) {
            System.out.println("Error: Input is invalid. " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Unexpected error: " + e.getMessage());
        }
    }
}
PARSER_END(Real)

// Define tokens
SKIP : { " " | "\t" | "\n" | "\r" | "\r\n" }
TOKEN : {<NUM:["0"-"9"](["0"-"9"])*>}
TOKEN : {<POINT:".">}


// Grammar rule for the start symbol
void Start() : {}
{
    (Declaration())*
    <EOF>
}

// Grammar rule for a single declaration
void Declaration() : {}
{
   <NUM>(<POINT><NUM>)*
}
